service: VentRent

# Use serverless-webpack plugin to transpile ES6/ES7
plugins:
  - serverless-webpack
  - serverless-offline
  
# Enable auto-packing of external modules
custom:
  lambdaExecSecurityGroup: sg-d3945ca7
  subnetAPrivate: subnet-dcc36df3
  subnetBPrivate: subnet-7cd07321
  subnetCPrivate: subnet-2ab9ab26
  webpackIncludeModules: true
  basePath: Vent.Rent/
  stage: ${opt:stage, self:provider.stage}
  namespace: ${self:service}-${self:custom.stage}

provider:
  name: aws
  runtime: nodejs6.10
  stage: prod
  region: us-east-1
  profile: rv_nonprod
  cfLogs: true
  stackTags:
  AppName: ${self:service}
  Namespace: ${self:custom.namespace}
#  vpc:
#     securityGroupIds:
#         - sg-d3945ca7
#     subnetIds:
#         - subnet-7cd07321
#         - subnet-afa6cce4
#         - subnet-47295923
#         - subnet-2ab9ab26
#         - subnet-d9cd45e6
#         - subnet-dcc36df3
#


 # 'iamRoleStatement' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: "*"
    - Effect: Allow
      Action:
        - rds:*
        - lambda:InvokeFunction
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
        - cloudwatch:DescribeAlarms
        - cloudwatch:GetMetricStatistics
        - ec2:DescribeAccountAttributes
        - ec2:DescribeAvailabilityZones
        - ec2:DescribeSecurityGroups
        - ec2:DescribeSubnets
        - ec2:DescribeVpcs
        - sns:ListSubscriptions
        - sns:ListTopics
        - logs:DescribeLogStreams
        - logs:GetLogEvents
      Resource: "*"
functions:
  getLandlord:
    handler: api/landlord/_get.getlandlordByName
    events:
      - http:
          path: ${self:custom.basePath}landlord/search/{Fname}
          method: get
          cors: true
          request:
            parameters:
              paths:
                Fname: true

  getPropertyById:
    handler: api/property/_get.getpropertyById
    events:
      - http:
          path: ${self:custom.basePath}property/{p_id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                p_id: true
  getRental:
    handler: api/rental/_get.getrental
    events:
      - http:
          path: ${self:custom.basePath}rental/{r_id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                r_id: true
  getQuestionnaire:
    handler: api/questionnaire/_get.getQuestionnaire
    events:
      - http:
          path: ${self:custom.basePath}question/{q_type}/{search_by}/{search_val}
          method: get
          cors: true
          request:
            parameters:
              paths:
                q_type: true
                search_by: true
                search_val: true
  getComplaints:
    handler: api/complaints/_get.getComplaints
    events:
      - http:
          path: ${self:custom.basePath}Complaints/{c_id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                c_id: true
  
  submiteQuestionnaire:
    handler: api/questionnaire/_post.submiteQuestionnaire
    events:
      - http:
          path: ${self:custom.basePath}questionnaire
          method: post
          cors: true
          
  createTenant:
    handler: api/tenant/_post.createTenant
    events:
      - http:
          path: ${self:custom.basePath}tenant
          method: post
          cors: true

  getPropertyByAddress:
    handler: api/property/_get.getpropertyByAdddressRDS
    events:
        - http:
            path: ${self:custom.basePath}property/address/{p_address}
            method: get
            cors: true
            request:
              parameters:
                paths:
                  p_address: true
    vpc:
      securityGroupIds:
       - sg-d3945ca7
      subnetIds:
       - subnet-dcc36df3
       - subnet-7cd07321
       - subnet-2ab9ab26

  getLandlordbyProperty:
    handler: api/landlord/_get.getlandlordByPropertyRDS
    events:
      - http:
          path: ${self:custom.basePath}landlord/property/{p_id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                p_id: true
    vpc:
      securityGroupIds:
       - sg-d3945ca7
      subnetIds:
       - subnet-dcc36df3
       - subnet-7cd07321
       - subnet-2ab9ab26
