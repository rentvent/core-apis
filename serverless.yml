service: VentRent

# Use serverless-webpack plugin to transpile ES6/ES7
plugins:
  - serverless-webpack
  - serverless-offline
  
# Enable auto-packing of external modules
custom:
  webpackIncludeModules: true
  basePath: Vent.Rent/
  stage: ${opt:stage, self:provider.stage}
  namespace: ${self:service}-${self:custom.stage}
  author: Mais Eid

provider:
  name: aws
  runtime: nodejs6.10
  stage: prod
  region: us-east-1
  profile: rv_nonprod
  stackTags:
    AppName: ${self:service}
    Author: ${self:custom.author}
    Namespace: ${self:custom.namespace}

 # 'iamRoleStatement' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  getLandlord:
    handler: api/landlord/_get.getlandlordByName
    events:
      - http:
          path: ${self:custom.basePath}landlord/search/{Fname}
          method: get
          cors: true
          request:
            parameters:
              paths:
                Fname: true

  getPropertyById:
    handler: api/property/_get.getpropertyById
    events:
      - http:
          path: ${self:custom.basePath}property/{p_id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                p_id: true

  getPropertyByAddress:
    handler: api/property/_get.getpropertyByAdddress
    events:
      - http:
          path: ${self:custom.basePath}property/address/{address}
          method: get
          cors: true
          request:
            parameters:
              paths:
                address: true

  getRental:
    handler: api/rental/_get.getrental
    events:
      - http:
          path: ${self:custom.basePath}rental/{r_id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                r_id: true
  getQuestionnaire:
    handler: api/questionnaire/_get.getQuestionnaire
    events:
      - http:
          path: ${self:custom.basePath}question/{q_type}/{search_by}/{search_val}
          method: get
          cors: true
          request:
            parameters:
              paths:
                q_type: true
                search_by: true
                search_val: true
  getComplaints:
    handler: api/complaints/_get.getComplaints
    events:
      - http:
          path: ${self:custom.basePath}Complaints/{c_id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                c_id: true
  
  submiteQuestionnaire:
    handler: api/questionnaire/_post.submiteQuestionnaire
    events:
      - http:
          path: ${self:custom.basePath}questionnaire
          method: post
          cors: true
          
  createTenant:
    handler: api/tenant/_post.createTenant
    events:
      - http:
          path: ${self:custom.basePath}tenant
          method: post
          cors: true

  getlandlordInfo:
    handler: api/landlord/_get.getlandlordInfo
    events:
      - http:
          path: ${self:custom.basePath}landlord/{l_id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                l_id: true

  getLandlordbyAddress:
    handler: api/landlord/_get.getlandlordByaddress
    events:
      - http:
          path: ${self:custom.basePath}landlord/address/{address}
          method: get
          cors: true
          request:
            parameters:
              paths:
                address: true
        

  
               
               

