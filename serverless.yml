service: VentRent

# Use serverless-webpack plugin to transpile ES6/ES7
plugins:
  - serverless-webpack
  - serverless-offline
  
# Enable auto-packing of external modules
custom:
  lambdaExecSecurityGroup:  sg-d3945ca7
  SUBNET_ID_A: subnet-7cd07321
  SUBNET_ID_B: subnet-47295923
  SUBNET_ID_C: subnet-dcc36df3
  webpackIncludeModules: true
  basePath: Vent.Rent/
  stage: ${opt:stage, self:provider.stage}
  namespace: ${self:service}-${self:custom.stage}


provider:
  name: aws
  runtime: nodejs6.10
  stage: prod
  region: us-east-1
  profile: rv_nonprod
  cfLogs: true
  stackTags:
  AppName: ${self:service}
  Namespace: ${self:custom.namespace}

 # 'iamRoleStatement' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: "*"
    - Effect: Allow
      Action:
        - rds:*
        - lambda:InvokeFunction
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
        - cloudwatch:DescribeAlarms
        - cloudwatch:GetMetricStatistics
        - ec2:DescribeAccountAttributes
        - ec2:DescribeAvailabilityZones
        - ec2:DescribeSecurityGroups
        - ec2:DescribeSubnets
        - ec2:DescribeVpcs
        - sns:ListSubscriptions
        - sns:ListTopics
        - logs:DescribeLogStreams
        - logs:GetLogEvents
      Resource: "*"

functions:
  #Landlord API 
  getLandlordByName:
    handler: api/landlord/cloudSearch/_get.getLandlordSearch
    events:
      - http:
          path: ${self:custom.basePath}landlord/cloudsearch/{p_name}
          method: get
          cors: true
          request:
            parameters:
              paths:
                p_name: true
  getLandlordbyProperty:
    handler: api/landlord/cloudSearch/_get.getLandlordbyProperty
    events:
      - http:
          path: ${self:custom.basePath}landlord/property/{lp_address}
          method: get
          cors: true
          request:
            parameters:
              paths:
                p_address: true
  getLandlordDetailes:
    handler: api/landlord/dynamo/_get.getlandlordInfo
    events:
      - http:
          path: ${self:custom.basePath}landlord/{l_id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                Fname: true

# Property API            
  getPropertyById:
    handler: api/property/dynamo/_get.getpropertyById
    events:
      - http:
          path: ${self:custom.basePath}property/{p_id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                p_id: true
  getPropertyByAddress:
    handler: api/property/rds/_get.getPropByAddRDS
    vpc:
       securityGroupIds:
          - ${self:custom.lambdaExecSecurityGroup}
       subnetIds:
          - ${self:custom.SUBNET_ID_A}
          - ${self:custom.SUBNET_ID_B}
          - ${self:custom.SUBNET_ID_C}
    events:
        - http:
            path: ${self:custom.basePath}property/address/{p_address}
            method: get
            cors: true
            request:
              parameters:
                paths:
                  p_address: true
# Complaints API 
  getComplaintscloudSearch:
    handler: api/complaints/cloudSearch/_get.getComplaintsSearch
    events:
      - http:
          path: ${self:custom.basePath}Complaints/cloudsearch/{p_address}
          method: get
          cors: true
          request:
            parameters:
              paths:
                p_address: true

  getComplaints:
    handler: api/complaints/rds/_get.getComplaintsRDS
    vpc:
       securityGroupIds:
        - ${self:custom.lambdaExecSecurityGroup}
       subnetIds:
        - ${self:custom.SUBNET_ID_A}
        - ${self:custom.SUBNET_ID_B}
        - ${self:custom.SUBNET_ID_C}
    events:
      - http:
          path: ${self:custom.basePath}Complaints/{c_id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                c_id: true
  
#Rental API 
  getRental:
    handler: api/rental/_get.getrental
    events:
      - http:
          path: ${self:custom.basePath}rental/{r_id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                r_id: true

  # Questionner API 
  getQuestionnaire:
    handler: api/questionnaire/_get.getQuestionnaire
    events:
      - http:
          path: ${self:custom.basePath}question/{q_type}/{search_by}/{search_val}
          method: get
          cors: true
          request:
            parameters:
              paths:
                q_type: true
                search_by: true
                search_val: true

  submiteQuestionnaire:
    handler: api/questionnaire/_post.submiteQuestionnaire
    events:
      - http:
          path: ${self:custom.basePath}questionnaire
          method: post
          cors: true
  #TenantAPI 
  createTenant:
    handler: api/tenant/_post.createTenant
    events:
      - http:
          path: ${self:custom.basePath}tenant
          method: post
          cors: true

 
  

#   getPropertycloudSearch:
#     handler: api/property/cloudSearch/_get.getPropertySearch
#     events:
#       - http:
#           path: ${self:custom.basePath}property/cloudsearch/{proprty_address}
#           method: get
#           cors: true
#           request:
#             parameters:
#               paths:
#                 proprty_address: true


